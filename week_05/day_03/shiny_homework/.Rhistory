library(tidyverse)
library(shinythemes)
library(CodeClanData)
scottish_exports
scot_exports_2017
olympics_overall_medals %>%
filter(team %in% c("United States",
"Soviet Union",
"Germany",
"Italy",
"Great Britain")) %>%
filter(medal == "Gold") %>%
filter(season == "Winter") %>%
mutate(as.factor(medal)) %>%
ggplot() +
aes(x = team, y = count, fill = medal) +
geom_col() +
scale_fill_manual(values = c("Gold" = "gold",
"Silver" = "grey87",
"Bronze" = "tan3")) +
theme_minimal() +
theme( plot.background = element_rect(fill = "black"),
axis.text = element_text(size = rel(2)))
olympics_overall_medals %>%
filter(team %in% c("United States",
"Soviet Union",
"Germany",
"Italy",
"Great Britain")) %>%
filter(medal == medal) %>%
filter(season == season) %>%
mutate(as.factor(medal)) %>%
ggplot() +
aes(x = team, y = count, fill = medal) +
geom_col() +
scale_fill_manual(values = c("Gold" = "gold",
"Silver" = "grey87",
"Bronze" = "tan3")) +
theme_minimal() +
theme( plot.background = element_rect(fill = "black"),
axis.text = element_text(size = rel(2)))
scottish_exports
scot_exports_2017
whisky
scottish_exports
whisky
scottish_exports
whisky
volcano
scottish_exports
whisky
temperature
scottish_exports
whisky
temp
scottish_exports
whisky
temp_df
scottish_exports
whisky
temp_df
salary
scottish_exports
whisky
temp_df
salary
unique(salary$location)
scottish_exports
whisky
temp_df
salary
unique(salary$job_area)
scottish_exports
whisky
temp_df
salary
refunds
school_census
starwars
tyrell_corp_jobs
vote19_eu
women_in_gov
recovery_times
monthly_sales
inflation4
inflation4 %>%
ggplot(aes(year, value)) +
geom_line()
inflation4 %>%
ggplot(aes(Year, value)) +
geom_line()
inflation4 %>%
group_by(variable) +
ggplot(aes(Year, value)) +
geom_line()
inflation4 %>%
ggplot(aes(Year, value)) +
geom_line()
inflation4 %>%
ggplot(aes(Year, value, colour = variable)) +
geom_line()
inflation4 %>%
ggplot(aes(Year, value, colour = variable)) +
geom_line() +
geom_point()
inflation4 %>%
ggplot(aes(Year, value, colour = variable)) +
geom_line() +
geom_point() +
theme_dark()
inflation4 %>%
ggplot(aes(Year, value, colour = variable)) +
geom_line() +
geom_point() +
theme_void()
inflation4 %>%
ggplot(aes(Year, value, colour = variable)) +
geom_line() +
geom_point() +
theme_linedraw()
inflation4 %>%
ggplot(aes(Year, value, colour = variable)) +
geom_line() +
geom_point() +
theme_linedraw() +
labs( y = "Inflation %" )
inflation4 %>%
ggplot(aes(Year, value, colour = variable)) +
geom_line() +
geom_point() +
theme_linedraw() +
labs( y = "Inflation %"
title = "Inflation rate over time")
inflation4 %>%
ggplot(aes(Year, value, colour = variable)) +
geom_line() +
geom_point() +
theme_linedraw() +
labs( y = "Inflation %",
title = "Inflation rate over time")
inflation4 %>%
ggplot(aes(Year, value, colour = variable)) +
geom_line() +
geom_point() +
theme_linedraw() +
labs( y = "Inflation %",
title = "Inflation Rate Over Time")
shiny::runApp()
runApp()
runApp()
runApp()
inflation4 %>%
filter( variable == variable) %>%
ggplot(aes(Year, value, colour = variable)) +
geom_line() +
geom_point() +
theme_linedraw() +
labs( y = "Inflation %",
title = "Inflation Rate Over Time")
inflation4 %>%
filter( variable == variable) %>%
ggplot(aes(Year, value, colour = variable)) +
geom_line() +
geom_point() +
theme_linedraw() +
labs( y = "Inflation %",
title = "Inflation Rate Over Time")
runApp()
runApp()
runApp()
inflation4 %>%
filter( variable == *) %>%
inflation4 %>%
filter( variable == variable) %>%
ggplot(aes(Year, value, colour = variable)) +
geom_line() +
geom_point() +
theme_linedraw() +
labs( y = "Inflation %",
title = "Inflation Rate Over Time")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Inflation"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons("country_input",
"Which Country?",
choices = c("UK",
"France",
"Germany",
"Spain"))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("inflation_plot")
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
